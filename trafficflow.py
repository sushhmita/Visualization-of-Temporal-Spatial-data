# -*- coding: utf-8 -*-
"""DHV_PROJECT(Trafficflow).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1werZREmKgdnNLSm2axqIvfIYTd6S4uRr
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
data = pd.read_csv("/content/trafficflow.csv")

data.columns

print(data.head())  # Check the first few rows
print(data.info())

# Inspect the dataset to understand its structure
print("Initial dataset shape:", data.shape)

# Retain only relevant columns for temporal-spatial analysis
required_columns = ['timestep', 'location', 'traffic', 'no_roads'] + [col for col in data.columns if col.startswith('hour_')]
data_filtered = data[required_columns]
print("Filtered dataset shape:", data_filtered.shape)

# Temporal Analysis: Aggregating traffic by timestep
temporal_data = data_filtered.groupby('timestep')['traffic'].sum().reset_index()

# Plot temporal trends
plt.figure(figsize=(12, 6))
sns.lineplot(data=temporal_data, x='timestep', y='traffic', marker='o', color='blue')
plt.title('Temporal Analysis of Traffic Flow', fontsize=16)
plt.xlabel('Time Step', fontsize=12)
plt.ylabel('Traffic', fontsize=12)
plt.grid(True)
plt.show()

# Spatial Analysis: Aggregating traffic by location
spatial_data = data_filtered.groupby('location')['traffic'].sum().reset_index()

# Plot spatial data
plt.figure(figsize=(12, 6))
sns.barplot(data=spatial_data, x='location', y='traffic', palette='viridis')
plt.title('Spatial Distribution of Traffic', fontsize=16)
plt.xlabel('Location', fontsize=12)
plt.ylabel('Traffic', fontsize=12)
plt.xticks(rotation=45)
plt.grid(True)
plt.show()

# Temporal-Spatial Heatmap: Traffic by hour and location
hour_columns = [col for col in data_filtered.columns if col.startswith('hour_')]
heatmap_data = data_filtered.groupby('location')[hour_columns].mean()

plt.figure(figsize=(14, 8))
sns.heatmap(heatmap_data, cmap='coolwarm', annot=False)
plt.title('Temporal-Spatial Heatmap of Traffic', fontsize=16)
plt.xlabel('Hour', fontsize=12)
plt.ylabel('Location', fontsize=12)
plt.show()

# Extract hour columns and traffic values for comparison
hour_columns = [col for col in data.columns if col.startswith('hour_')]
hourly_traffic = data[hour_columns].mean()

# Plot the comparison of traffic by hour
plt.figure(figsize=(12, 6))
sns.lineplot(x=range(1, 25), y=hourly_traffic, marker='o', color='b')
plt.title('Average Traffic Flow by Hour', fontsize=16)
plt.xlabel('Hour of Day', fontsize=12)
plt.ylabel('Average Traffic', fontsize=12)
plt.xticks(range(1, 25))
plt.grid(True)
plt.show()

# Select relevant columns for correlation analysis
corr_columns = ['traffic', 'no_roads'] + [col for col in data.columns if col.startswith('prev_')] + hour_columns
correlation_matrix = data[corr_columns].corr()

# Plot the correlation heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title('Correlation Heatmap of Traffic Flow and Features', fontsize=16)
plt.show()